#!/usr/bin/env python
# -*- coding: utf-8 -*- 

#
# Generated Fri Aug 22 09:27:54 2014 by generateDS.py version 2.6a.
#

import sys
import getopt
import re as re_

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        print("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            print("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                print("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    print("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        print("running with ElementTree")
                except ImportError:
                    raise ImportError("Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError, exp:

    class GeneratedsSuper(object):
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError), exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node, 'Requires sequence of booleans ("true", "1", "false", "0")')
            return input_data
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level):
    for idx in range(level):
        outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip(): 
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace,name)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (self.name, self.value, self.name))
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n' % \
                (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class Observation(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, subarrayId=None, seq=None, datasetID=None, startTime=None, configId=None, datasetId=None, name=None, ra=None, dec=None, dra=None, ddec=None, azoffs=None, eloffs=None, startLST=None, intent=None, state=None, scanNo=None, subscanNo=None, modifier=None, correlator=None, sslo=None):
        self.subarrayId = _cast(None, subarrayId)
        self.seq = _cast(int, seq)
        self.datasetID = _cast(None, datasetID)
        self.startTime = _cast(float, startTime)
        self.configId = _cast(None, configId)
        self.datasetId = _cast(None, datasetId)
        self.name = name
        self.ra = ra
        self.dec = dec
        self.dra = dra
        self.ddec = ddec
        self.azoffs = azoffs
        self.eloffs = eloffs
        self.startLST = startLST
        if intent is None:
            self.intent = []
        else:
            self.intent = intent
        self.state = state
        self.scanNo = scanNo
        self.subscanNo = subscanNo
        if modifier is None:
            self.modifier = []
        else:
            self.modifier = modifier
        self.correlator = correlator
        if sslo is None:
            self.sslo = []
        else:
            self.sslo = sslo
    def factory(*args_, **kwargs_):
        if Observation.subclass:
            return Observation.subclass(*args_, **kwargs_)
        else:
            return Observation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_ra(self): return self.ra
    def set_ra(self, ra): self.ra = ra
    def get_dec(self): return self.dec
    def set_dec(self, dec): self.dec = dec
    def get_dra(self): return self.dra
    def set_dra(self, dra): self.dra = dra
    def get_ddec(self): return self.ddec
    def set_ddec(self, ddec): self.ddec = ddec
    def get_azoffs(self): return self.azoffs
    def set_azoffs(self, azoffs): self.azoffs = azoffs
    def get_eloffs(self): return self.eloffs
    def set_eloffs(self, eloffs): self.eloffs = eloffs
    def get_startLST(self): return self.startLST
    def set_startLST(self, startLST): self.startLST = startLST
    def get_intent(self): return self.intent
    def set_intent(self, intent): self.intent = intent
    def add_intent(self, value): self.intent.append(value)
    def insert_intent(self, index, value): self.intent[index] = value
    def get_state(self): return self.state
    def set_state(self, state): self.state = state
    def get_scanNo(self): return self.scanNo
    def set_scanNo(self, scanNo): self.scanNo = scanNo
    def get_subscanNo(self): return self.subscanNo
    def set_subscanNo(self, subscanNo): self.subscanNo = subscanNo
    def get_modifier(self): return self.modifier
    def set_modifier(self, modifier): self.modifier = modifier
    def add_modifier(self, value): self.modifier.append(value)
    def insert_modifier(self, index, value): self.modifier[index] = value
    def get_correlator(self): return self.correlator
    def set_correlator(self, correlator): self.correlator = correlator
    def get_sslo(self): return self.sslo
    def set_sslo(self, sslo): self.sslo = sslo
    def add_sslo(self, value): self.sslo.append(value)
    def insert_sslo(self, index, value): self.sslo[index] = value
    def get_subarrayId(self): return self.subarrayId
    def set_subarrayId(self, subarrayId): self.subarrayId = subarrayId
    def get_seq(self): return self.seq
    def set_seq(self, seq): self.seq = seq
    def get_datasetID(self): return self.datasetID
    def set_datasetID(self, datasetID): self.datasetID = datasetID
    def get_startTime(self): return self.startTime
    def set_startTime(self, startTime): self.startTime = startTime
    def get_configId(self): return self.configId
    def set_configId(self, configId): self.configId = configId
    def get_datasetId(self): return self.datasetId
    def set_datasetId(self, datasetId): self.datasetId = datasetId
    def export(self, outfile, level, namespace_='', name_='Observation', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='Observation')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='Observation'):
        if self.subarrayId is not None and 'subarrayId' not in already_processed:
            already_processed.append('subarrayId')
            outfile.write(' subarrayId=%s' % (self.gds_format_string(quote_attrib(self.subarrayId).encode(ExternalEncoding), input_name='subarrayId'), ))
        if self.seq is not None and 'seq' not in already_processed:
            already_processed.append('seq')
            outfile.write(' seq="%s"' % self.gds_format_integer(self.seq, input_name='seq'))
        if self.datasetID is not None and 'datasetID' not in already_processed:
            already_processed.append('datasetID')
            outfile.write(' datasetID=%s' % (self.gds_format_string(quote_attrib(self.datasetID).encode(ExternalEncoding), input_name='datasetID'), ))
        if self.startTime is not None and 'startTime' not in already_processed:
            already_processed.append('startTime')
            outfile.write(' startTime="%s"' % self.gds_format_double(self.startTime, input_name='startTime'))
        if self.configId is not None and 'configId' not in already_processed:
            already_processed.append('configId')
            outfile.write(' configId=%s' % (self.gds_format_string(quote_attrib(self.configId).encode(ExternalEncoding), input_name='configId'), ))
        if self.datasetId is not None and 'datasetId' not in already_processed:
            already_processed.append('datasetId')
            outfile.write(' datasetId=%s' % (self.gds_format_string(quote_attrib(self.datasetId).encode(ExternalEncoding), input_name='datasetId'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='Observation', fromsubclass_=False):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('<%sname>%s</%sname>\n' % (namespace_, self.gds_format_string(quote_xml(self.name).encode(ExternalEncoding), input_name='name'), namespace_))
        if self.ra is not None:
            showIndent(outfile, level)
            outfile.write('<%sra>%s</%sra>\n' % (namespace_, self.gds_format_double(self.ra, input_name='ra'), namespace_))
        if self.dec is not None:
            showIndent(outfile, level)
            outfile.write('<%sdec>%s</%sdec>\n' % (namespace_, self.gds_format_double(self.dec, input_name='dec'), namespace_))
        if self.dra is not None:
            showIndent(outfile, level)
            outfile.write('<%sdra>%s</%sdra>\n' % (namespace_, self.gds_format_double(self.dra, input_name='dra'), namespace_))
        if self.ddec is not None:
            showIndent(outfile, level)
            outfile.write('<%sddec>%s</%sddec>\n' % (namespace_, self.gds_format_double(self.ddec, input_name='ddec'), namespace_))
        if self.azoffs is not None:
            showIndent(outfile, level)
            outfile.write('<%sazoffs>%s</%sazoffs>\n' % (namespace_, self.gds_format_double(self.azoffs, input_name='azoffs'), namespace_))
        if self.eloffs is not None:
            showIndent(outfile, level)
            outfile.write('<%seloffs>%s</%seloffs>\n' % (namespace_, self.gds_format_double(self.eloffs, input_name='eloffs'), namespace_))
        if self.startLST is not None:
            showIndent(outfile, level)
            outfile.write('<%sstartLST>%s</%sstartLST>\n' % (namespace_, self.gds_format_double(self.startLST, input_name='startLST'), namespace_))
        for intent_ in self.intent:
            showIndent(outfile, level)
            outfile.write('<%sintent>%s</%sintent>\n' % (namespace_, self.gds_format_string(quote_xml(intent_).encode(ExternalEncoding), input_name='intent'), namespace_))
        if self.state is not None:
            showIndent(outfile, level)
            outfile.write('<%sstate>%s</%sstate>\n' % (namespace_, self.gds_format_integer(self.state, input_name='state'), namespace_))
        if self.scanNo is not None:
            showIndent(outfile, level)
            outfile.write('<%sscanNo>%s</%sscanNo>\n' % (namespace_, self.gds_format_integer(self.scanNo, input_name='scanNo'), namespace_))
        if self.subscanNo is not None:
            showIndent(outfile, level)
            outfile.write('<%ssubscanNo>%s</%ssubscanNo>\n' % (namespace_, self.gds_format_integer(self.subscanNo, input_name='subscanNo'), namespace_))
        for modifier_ in self.modifier:
            showIndent(outfile, level)
            outfile.write('<%smodifier>%s</%smodifier>\n' % (namespace_, self.gds_format_string(quote_xml(modifier_).encode(ExternalEncoding), input_name='modifier'), namespace_))
        if self.correlator is not None:
            showIndent(outfile, level)
            outfile.write('<%scorrelator>%s</%scorrelator>\n' % (namespace_, self.gds_format_string(quote_xml(self.correlator).encode(ExternalEncoding), input_name='correlator'), namespace_))
        for sslo_ in self.sslo:
            sslo_.export(outfile, level, namespace_, name_='sslo')
    def hasContent_(self):
        if (
            self.name is not None or
            self.ra is not None or
            self.dec is not None or
            self.dra is not None or
            self.ddec is not None or
            self.azoffs is not None or
            self.eloffs is not None or
            self.startLST is not None or
            self.intent or
            self.state is not None or
            self.scanNo is not None or
            self.subscanNo is not None or
            self.modifier or
            self.correlator is not None or
            self.sslo
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='Observation'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.subarrayId is not None and 'subarrayId' not in already_processed:
            already_processed.append('subarrayId')
            showIndent(outfile, level)
            outfile.write('subarrayId = "%s",\n' % (self.subarrayId,))
        if self.seq is not None and 'seq' not in already_processed:
            already_processed.append('seq')
            showIndent(outfile, level)
            outfile.write('seq = %d,\n' % (self.seq,))
        if self.datasetID is not None and 'datasetID' not in already_processed:
            already_processed.append('datasetID')
            showIndent(outfile, level)
            outfile.write('datasetID = "%s",\n' % (self.datasetID,))
        if self.startTime is not None and 'startTime' not in already_processed:
            already_processed.append('startTime')
            showIndent(outfile, level)
            outfile.write('startTime = %e,\n' % (self.startTime,))
        if self.configId is not None and 'configId' not in already_processed:
            already_processed.append('configId')
            showIndent(outfile, level)
            outfile.write('configId = "%s",\n' % (self.configId,))
        if self.datasetId is not None and 'datasetId' not in already_processed:
            already_processed.append('datasetId')
            showIndent(outfile, level)
            outfile.write('datasetId = "%s",\n' % (self.datasetId,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.name is not None:
            showIndent(outfile, level)
            outfile.write('name=%s,\n' % quote_python(self.name).encode(ExternalEncoding))
        if self.ra is not None:
            showIndent(outfile, level)
            outfile.write('ra=%e,\n' % self.ra)
        if self.dec is not None:
            showIndent(outfile, level)
            outfile.write('dec=%e,\n' % self.dec)
        if self.dra is not None:
            showIndent(outfile, level)
            outfile.write('dra=%e,\n' % self.dra)
        if self.ddec is not None:
            showIndent(outfile, level)
            outfile.write('ddec=%e,\n' % self.ddec)
        if self.azoffs is not None:
            showIndent(outfile, level)
            outfile.write('azoffs=%e,\n' % self.azoffs)
        if self.eloffs is not None:
            showIndent(outfile, level)
            outfile.write('eloffs=%e,\n' % self.eloffs)
        if self.startLST is not None:
            showIndent(outfile, level)
            outfile.write('startLST=%e,\n' % self.startLST)
        showIndent(outfile, level)
        outfile.write('intent=[\n')
        level += 1
        for intent_ in self.intent:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(intent_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.state is not None:
            showIndent(outfile, level)
            outfile.write('state=%d,\n' % self.state)
        if self.scanNo is not None:
            showIndent(outfile, level)
            outfile.write('scanNo=%d,\n' % self.scanNo)
        if self.subscanNo is not None:
            showIndent(outfile, level)
            outfile.write('subscanNo=%d,\n' % self.subscanNo)
        showIndent(outfile, level)
        outfile.write('modifier=[\n')
        level += 1
        for modifier_ in self.modifier:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(modifier_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        if self.correlator is not None:
            showIndent(outfile, level)
            outfile.write('correlator=%s,\n' % quote_python(self.correlator).encode(ExternalEncoding))
        showIndent(outfile, level)
        outfile.write('sslo=[\n')
        level += 1
        for sslo_ in self.sslo:
            showIndent(outfile, level)
            outfile.write('model_.ssloType(\n')
            sslo_.exportLiteral(outfile, level, name_='ssloType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('subarrayId', node)
        if value is not None and 'subarrayId' not in already_processed:
            already_processed.append('subarrayId')
            self.subarrayId = value
        value = find_attr_value_('seq', node)
        if value is not None and 'seq' not in already_processed:
            already_processed.append('seq')
            try:
                self.seq = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('datasetID', node)
        if value is not None and 'datasetID' not in already_processed:
            already_processed.append('datasetID')
            self.datasetID = value
        value = find_attr_value_('startTime', node)
        if value is not None and 'startTime' not in already_processed:
            already_processed.append('startTime')
            try:
                self.startTime = float(value)
            except ValueError, exp:
                raise ValueError('Bad float/double attribute (startTime): %s' % exp)
        value = find_attr_value_('configId', node)
        if value is not None and 'configId' not in already_processed:
            already_processed.append('configId')
            self.configId = value
        value = find_attr_value_('datasetId', node)
        if value is not None and 'datasetId' not in already_processed:
            already_processed.append('datasetId')
            self.datasetId = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'ra':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ra')
            self.ra = fval_
        elif nodeName_ == 'dec':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'dec')
            self.dec = fval_
        elif nodeName_ == 'dra':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'dra')
            self.dra = fval_
        elif nodeName_ == 'ddec':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ddec')
            self.ddec = fval_
        elif nodeName_ == 'azoffs':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'azoffs')
            self.azoffs = fval_
        elif nodeName_ == 'eloffs':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'eloffs')
            self.eloffs = fval_
        elif nodeName_ == 'startLST':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'startLST')
            self.startLST = fval_
        elif nodeName_ == 'intent':
            intent_ = child_.text
            intent_ = self.gds_validate_string(intent_, node, 'intent')
            self.intent.append(intent_)
        elif nodeName_ == 'state':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'state')
            self.state = ival_
        elif nodeName_ == 'scanNo':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'scanNo')
            self.scanNo = ival_
        elif nodeName_ == 'subscanNo':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'subscanNo')
            self.subscanNo = ival_
        elif nodeName_ == 'modifier':
            modifier_ = child_.text
            modifier_ = self.gds_validate_string(modifier_, node, 'modifier')
            self.modifier.append(modifier_)
        elif nodeName_ == 'correlator':
            correlator_ = child_.text
            correlator_ = self.gds_validate_string(correlator_, node, 'correlator')
            self.correlator = correlator_
        elif nodeName_ == 'sslo':
            obj_ = ssloType.factory()
            obj_.build(child_)
            self.sslo.append(obj_)
# end class Observation


class ssloType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, IFid=None, Sideband=None, Receiver=None, freq=None):
        self.IFid = _cast(None, IFid)
        self.Sideband = _cast(int, Sideband)
        self.Receiver = _cast(None, Receiver)
        self.freq = freq
    def factory(*args_, **kwargs_):
        if ssloType.subclass:
            return ssloType.subclass(*args_, **kwargs_)
        else:
            return ssloType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_freq(self): return self.freq
    def set_freq(self, freq): self.freq = freq
    def get_IFid(self): return self.IFid
    def set_IFid(self, IFid): self.IFid = IFid
    def get_Sideband(self): return self.Sideband
    def set_Sideband(self, Sideband): self.Sideband = Sideband
    def get_Receiver(self): return self.Receiver
    def set_Receiver(self, Receiver): self.Receiver = Receiver
    def export(self, outfile, level, namespace_='', name_='ssloType', namespacedef_=''):
        showIndent(outfile, level)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = []
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='ssloType')
        if self.hasContent_():
            outfile.write('>\n')
            self.exportChildren(outfile, level + 1, namespace_, name_)
            showIndent(outfile, level)
            outfile.write('</%s%s>\n' % (namespace_, name_))
        else:
            outfile.write('/>\n')
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='ssloType'):
        if self.IFid is not None and 'IFid' not in already_processed:
            already_processed.append('IFid')
            outfile.write(' IFid=%s' % (self.gds_format_string(quote_attrib(self.IFid).encode(ExternalEncoding), input_name='IFid'), ))
        if self.Sideband is not None and 'Sideband' not in already_processed:
            already_processed.append('Sideband')
            outfile.write(' Sideband="%s"' % self.gds_format_integer(self.Sideband, input_name='Sideband'))
        if self.Receiver is not None and 'Receiver' not in already_processed:
            already_processed.append('Receiver')
            outfile.write(' Receiver=%s' % (self.gds_format_string(quote_attrib(self.Receiver).encode(ExternalEncoding), input_name='Receiver'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='ssloType', fromsubclass_=False):
        if self.freq is not None:
            showIndent(outfile, level)
            outfile.write('<%sfreq>%s</%sfreq>\n' % (namespace_, self.gds_format_double(self.freq, input_name='freq'), namespace_))
    def hasContent_(self):
        if (
            self.freq is not None
            ):
            return True
        else:
            return False
    def exportLiteral(self, outfile, level, name_='ssloType'):
        level += 1
        self.exportLiteralAttributes(outfile, level, [], name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.IFid is not None and 'IFid' not in already_processed:
            already_processed.append('IFid')
            showIndent(outfile, level)
            outfile.write('IFid = "%s",\n' % (self.IFid,))
        if self.Sideband is not None and 'Sideband' not in already_processed:
            already_processed.append('Sideband')
            showIndent(outfile, level)
            outfile.write('Sideband = %d,\n' % (self.Sideband,))
        if self.Receiver is not None and 'Receiver' not in already_processed:
            already_processed.append('Receiver')
            showIndent(outfile, level)
            outfile.write('Receiver = "%s",\n' % (self.Receiver,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.freq is not None:
            showIndent(outfile, level)
            outfile.write('freq=%e,\n' % self.freq)
    def build(self, node):
        self.buildAttributes(node, node.attrib, [])
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('IFid', node)
        if value is not None and 'IFid' not in already_processed:
            already_processed.append('IFid')
            self.IFid = value
        value = find_attr_value_('Sideband', node)
        if value is not None and 'Sideband' not in already_processed:
            already_processed.append('Sideband')
            try:
                self.Sideband = int(value)
            except ValueError, exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('Receiver', node)
        if value is not None and 'Receiver' not in already_processed:
            already_processed.append('Receiver')
            self.Receiver = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'freq':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError), exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'freq')
            self.freq = fval_
# end class ssloType


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    print USAGE_TEXT
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Observation'
        rootClass = Observation
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_=rootTag, 
##         namespacedef_='')
    return rootObj


def parseString(inString):
    from StringIO import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Observation'
        rootClass = Observation
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('<?xml version="1.0" ?>\n')
##     rootObj.export(sys.stdout, 0, name_="Observation",
##         namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'Observation'
        rootClass = Observation
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     sys.stdout.write('#from observation_mcast import *\n\n')
##     sys.stdout.write('import observation_mcast as model_\n\n')
##     sys.stdout.write('rootObj = model_.rootTag(\n')
##     rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
##     sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "Observation",
    "ssloType"
    ]
